[{"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\index.js":"1","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\App.js":"2","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\reportWebVitals.js":"3","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\store\\index.js":"4","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\reducer\\index.js":"5","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\actions\\index.js":"6","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\LandingPage\\LandingPage.js":"7","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Detail\\Detail.js":"8","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Home\\Home.js":"9","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\PokemonCreate\\PokemonCreate.js":"10","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Error404\\Error404.js":"11","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Nav\\Nav.js":"12","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Loading\\Loading.js":"13","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Card\\Card.js":"14","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Pagination\\Pagination.js":"15","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Filters\\Filters.js":"16","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\SearchBar\\SearchBar.js":"17"},{"size":617,"mtime":1671500922320,"results":"18","hashOfConfig":"19"},{"size":837,"mtime":1671675621107,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1653672168000,"results":"21","hashOfConfig":"19"},{"size":308,"mtime":1672192763596,"results":"22","hashOfConfig":"19"},{"size":4899,"mtime":1672184438799,"results":"23","hashOfConfig":"19"},{"size":3307,"mtime":1672168765124,"results":"24","hashOfConfig":"19"},{"size":491,"mtime":1672329117933,"results":"25","hashOfConfig":"19"},{"size":2554,"mtime":1672331774451,"results":"26","hashOfConfig":"19"},{"size":2492,"mtime":1671844088856,"results":"27","hashOfConfig":"19"},{"size":8056,"mtime":1672175113500,"results":"28","hashOfConfig":"19"},{"size":398,"mtime":1651683006000,"results":"29","hashOfConfig":"19"},{"size":644,"mtime":1651683006000,"results":"30","hashOfConfig":"19"},{"size":251,"mtime":1651683006000,"results":"31","hashOfConfig":"19"},{"size":1190,"mtime":1671675865928,"results":"32","hashOfConfig":"19"},{"size":742,"mtime":1672330009077,"results":"33","hashOfConfig":"19"},{"size":2679,"mtime":1672173708674,"results":"34","hashOfConfig":"19"},{"size":1171,"mtime":1672168586960,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"npr72f",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\index.js",[],["74","75"],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\App.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\reportWebVitals.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\store\\index.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\reducer\\index.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\actions\\index.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\LandingPage\\LandingPage.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Detail\\Detail.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Home\\Home.js",["76","77"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cleanPokemons, getPokemons } from \"../../actions\";\nimport Card from \"../Card/Card\";\nimport Filters from \"../Filters/Filters\";\nimport Pagination from \"../Pagination/Pagination\";\nimport Nav from \"../Nav/Nav\";\nimport Loading from \"../Loading/Loading\";\nimport styles from \"./Home.module.css\";\n\nexport default function Home() {\n  const dispatch = useDispatch();\n  const allPokemons = useSelector((state) => state.pokemons);\n \n  //Paginado acÃ¡ abajo\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pokemonsPerPage, setPokemonsPerPage] = useState(12);\n  const [order, setOrder] = useState(\"\"); //Para modificar el estado local y me ayude al renderizado\n  const indexOfLastPokemon = currentPage * pokemonsPerPage;\n  const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage;\n   console.log(allPokemons);\n  const currentPokemons = allPokemons.slice(indexOfFirstPokemon,indexOfLastPokemon);\n\n  const pagination = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    dispatch(getPokemons());\n  }, [dispatch]);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    dispatch(cleanPokemons(dispatch));\n    dispatch(getPokemons());\n  };\n\n  return (\n    <div>\n      {allPokemons.length > 0 ? (\n        <div>\n          <Nav />\n          <div className={styles.home}>\n            <div className={styles.filters}>\n              <Filters setCurrentPage={setCurrentPage} setOrder={setOrder} />\n              <button\n                className={styles.btn}\n                onClick={(e) => {\n                  handleClick(e);\n                }}\n              >\n                Clear filters\n              </button>\n            </div>\n            <div>\n              <div>\n                <Pagination\n                  pokemonsPerPage={pokemonsPerPage}\n                  allPokemons={allPokemons.length}\n                  pagination={pagination}\n                />\n              </div>\n              <div className={styles.cards}>\n                {currentPokemons?.map((e, k) => {\n                  return (\n                    <div key={k} className={styles.card}>\n                      <Card key={e.id} id={e.id} name={e.name} image={e.img} />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n}\n","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\PokemonCreate\\PokemonCreate.js",["78"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { getAlltypes, postPokemon, cleanPokemons } from '../../actions';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styles from './PokemonCreate.module.css'\n\n\n\n\nconst PokemonCreate = () => {\n    \n    const dispatch = useDispatch();\n    const types = useSelector((state) => state.types);\n    const [errors, setErrors] = useState({});\n    const history = useHistory();\n    \n    const [input, setInput] = useState({\n        name: '', \n        hp: '', \n        strength: '', \n        defense: '', \n        speed: '',\n        height: '', \n        weight: '', \n        types: [],\n        img: ''\n    })\n    \n    let noEmpty = /\\S+/;\n    let validateName = /^[a-z]+$/i;\n    let validateNum = /^\\d+$/;\n    let validateUrl = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n    \n    const validate = (input) => {\n            let errors = {};\n            if (!noEmpty.test(input.name) || !validateName.test(input.name) || input.name.length < 3) {\n            errors.name = \"Name required. Only string of more than two characters and without numbers\";\n            }\n            if (!validateNum.test(input.hp) || parseInt(input.hp) < 1 ) {\n                errors.hp = \"Number required. Higher than one\";\n            }\n            if (!validateNum.test(input.strength) || parseInt(input.strength) < 1) {\n                errors.strength = \"Number required. Higher than one\";\n            }\n            if (!validateNum.test(input.defense) || parseInt(input.defense) < 1) {\n                errors.defense = \"Number required. Higher than one\";\n            }\n            if (!validateNum.test(input.speed) || parseInt(input.speed) < 1) {\n                errors.speed = \"Number required. Higher than one\";\n            }\n            if (!validateNum.test(input.height) || parseInt(input.height) < 1) {\n                errors.height = \"Number required. Higher than one\";\n            }\n            if (!validateNum.test(input.weight) || parseInt(input.weight) < 1) {\n                errors.weight = \"Number required. Higher than one\";\n            }\n            if (!validateUrl.test(input.img)) {\n            errors.img = \"URL required\";\n            }\n\n            return errors;\n        };\n\n    const handleChange = e => {\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        });\n        setErrors(validate({\n            ...input,\n            [e.target.name]: e.target.value\n        }))\n    }\n\n    const handleSelect = e => {\n        if (input.types.length < 2) {\n            setInput({\n                ...input,\n                types: [...new Set([...input.types, e.target.value])]\n            })\n            e.target.value = 'Select type';\n        } else {\n            alert('Two types of pokemon at most')\n        }\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (\n            !errors.name &&\n            !errors.hp &&\n            !errors.strength &&\n            !errors.defense &&\n            !errors.speed &&\n            !errors.height &&\n            !errors.weight &&\n            !errors.img \n        ) {\n\n            dispatch(postPokemon(input));\n            setInput({\n                name: '', \n                hp: '', \n                strength: '', \n                defense: '', \n                speed: '',\n                height: '', \n                weight: '', \n                types: [],\n                img: ''\n            });\n           \n            history.push('/home')\n        } else {\n            alert('Error. Check the form');\n        }\n    }\n\n    const handleDelete = (e) => {\n        setInput({\n            ...input,\n            types: input.types.filter(type => type !== e)\n        })\n    }\n\n    useEffect(() => {\n        dispatch(getAlltypes())\n    }, [dispatch])\n\n    return ( \n        <div className={styles.container}>\n            <Link to='/home'>\n                <button className={styles.btn}>Go Back</button>\n            </Link>\n            <form className={styles.form} onSubmit={e => {handleSubmit(e)}}>\n            <h2 className={styles.h2}>Create a pokemÃ³n!</h2>\n                <div className={styles.div}>\n                    <div className={styles.divito}>\n                        <label className={styles.label}>Name:</label>\n                        <input className={styles.input} type=\"text\" value={input.name} name='name' onChange={e => {handleChange(e)}} placeholder=\"Name\" />\n                        <p className={styles.p}>{errors.name}</p>\n                        <label className={styles.label}>HP:</label>\n                        <input className={styles.input} type=\"number\" value={input.hp} name='hp' onChange={e => {handleChange(e)}} placeholder=\"HP\" />\n                        <p className={styles.p}>{errors.hp}</p>\n                        <label className={styles.label}>Attack:</label>\n                        <input className={styles.input} type=\"number\" value={input.strength} name='strength' onChange={e => {handleChange(e)}} placeholder=\"Attack\" />\n                        <p className={styles.p}>{errors.strength}</p>\n                        <label className={styles.label}>Defense:</label>\n                        <input className={styles.input} type=\"number\" value={input.defense} name='defense' onChange={e => {handleChange(e)}} placeholder=\"Defense\" />\n                        <p className={styles.p}>{errors.defense}</p>\n                    </div>\n                    <div className={styles.divito}>\n                        <label className={styles.label}>Speed:</label>\n                        <input className={styles.input} type=\"number\" value={input.speed} name='speed' onChange={e => {handleChange(e)}} placeholder=\"Speed\" />\n                        <p className={styles.p}>{errors.speed}</p>\n                        <label className={styles.label}>Height:</label>\n                        <input className={styles.input} type=\"number\" value={input.height} name='height' onChange={e => {handleChange(e)}} placeholder=\"Height\" />\n                        <p className={styles.p}>{errors.height}</p>\n                        <label className={styles.label}>Weight:</label>\n                        <input className={styles.input} type=\"number\" value={input.weight} name='weight' onChange={e => {handleChange(e)}} placeholder=\"Weight\" />\n                        <p className={styles.p}>{errors.weight}</p>\n                        <label className={styles.label}>Image:</label>\n                        <input className={styles.input} type=\"text\" value={input.img} name='img' onChange={e => {handleChange(e)}} placeholder=\"URL Image...\" />\n                        <p className={styles.p}>{errors.img}</p>\n                    </div>\n                </div>\n                <div>\n                    <select className={styles.select} onChange={e => {handleSelect(e)}}>\n                        <option>Select type</option>\n                        {\n                            types?.map(e => {\n                                return (\n                                    <option key={e.id} value={e.name}>{e.name}</option>\n                                )\n                            })\n                        }\n                    </select>\n                            {\n                                input.types.map(e => {\n                                    return (\n                                        <div className={styles.typesSelect} key={e}>\n                                            <p className={styles.pTypes}>{e}</p>\n                                            <button className={styles.btnDelete} onClick={() => {handleDelete(e)}}>x</button>\n                                        </div>\n                                    )\n                                }) //para poder ver que fui seleccionando\n                            }\n                </div>\n            <button className={styles.btnCreate} type='submit'>Create!</button>\n            </form>\n        </div>\n     );\n}\n \nexport default PokemonCreate;","C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Error404\\Error404.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Nav\\Nav.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Loading\\Loading.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Card\\Card.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Pagination\\Pagination.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\Filters\\Filters.js",[],"C:\\Users\\ADMIN\\Downloads\\PI-Pokemon-main\\client\\src\\components\\SearchBar\\SearchBar.js",["79"],"import React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getPokemonByName, cleanPokemons } from '../../actions';\nimport styles from './SearchBar.module.css'\n\nconst SearchBar = () => {\n    \n    const dispatch = useDispatch();\n    const [name, setName] = useState({name:''});\n    \n    const handleInputChange = (e) => {\n       e.preventDefault();\n        setName({\n          ...name,\n          [e.target.name]:e.target.value\n        });\n        console.log(name);\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //dispatch(cleanPokemons(dispatch));\n        dispatch(getPokemonByName(name.name));\n        setName({ name: \"\" });\n        e.target.reset();\n    }\n\n    return (\n      <form className={styles.search} onSubmit={handleSubmit}>\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          onChange={ handleInputChange}\n          placeholder=\"Buscar...\"\n          autoComplete=\"off\"\n        />\n        <button type=\"submit\" className={styles.btn} >\n          Buscar\n        </button>\n      </form>\n    );\n}\n \nexport default SearchBar;",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":17,"column":27,"nodeType":"86","messageId":"87","endLine":17,"endColumn":45},{"ruleId":"84","severity":1,"message":"88","line":18,"column":10,"nodeType":"86","messageId":"87","endLine":18,"endColumn":15},{"ruleId":"84","severity":1,"message":"89","line":3,"column":36,"nodeType":"86","messageId":"87","endLine":3,"endColumn":49},{"ruleId":"84","severity":1,"message":"89","line":4,"column":28,"nodeType":"86","messageId":"87","endLine":4,"endColumn":41},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'setPokemonsPerPage' is assigned a value but never used.","Identifier","unusedVar","'order' is assigned a value but never used.","'cleanPokemons' is defined but never used.","no-global-assign","no-unsafe-negation"]