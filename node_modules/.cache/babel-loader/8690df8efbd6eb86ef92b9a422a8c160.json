{"ast":null,"code":"import { GET_POKEMONS, GET_ALL_TYPES, FILTER_CREATED, ORDER_NAME, FILTER_TYPE, ORDER_STR, GET_POKEMON_NAME, POST_POKEMON, GET_DETAILS, CLEAN_DETAIL, CLEAN_POKEMONS } from \"../actions\";\nconst initialState = {\n  pokemons: [],\n  allPokemons: [],\n  types: [],\n  pokeDetail: []\n};\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        pokemons: action.payload,\n        allPokemons: action.payload\n      };\n    case CLEAN_POKEMONS:\n      return {\n        ...state,\n        pokemons: action.payload\n      };\n    case GET_ALL_TYPES:\n      return {\n        ...state,\n        types: action.payload\n      };\n    case FILTER_CREATED:\n      let copy = state.allPokemons;\n      let createdFiltered;\n      if (action.payload === 'created') {\n        createdFiltered = copy.filter(e => e.createdInBd);\n      } else if (action.payload === 'api') {\n        createdFiltered = copy.filter(e => !e.createdInBd);\n      } else {\n        createdFiltered = copy;\n      }\n      return {\n        ...state,\n        pokemons: createdFiltered\n      };\n    case FILTER_TYPE:\n      let copyTwo = state.pokemons;\n      let typeFiltered = action.payload === 'all' ? copyTwo : copyTwo.filter(e => e.types.some(e => e.name === action.payload));\n      if (typeFiltered.length <= 0) {\n        typeFiltered = copyTwo;\n        alert('There are no pokemon of the indicated type');\n      }\n      ;\n      return {\n        ...state,\n        pokemons: typeFiltered\n      };\n    case ORDER_NAME:\n      let copy3 = state.pokemons;\n      let sortedName = action.payload === 'asc' ? copy3.sort((a, b) => {\n        return a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n      }) : copy3.sort((a, b) => {\n        return b.name.toLowerCase().localeCompare(a.name.toLowerCase());\n      });\n      return {\n        ...state,\n        pokemons: sortedName\n      };\n    case ORDER_STR:\n      let copy4 = state.pokemons;\n      let sortedStr = action.payload === 'asc' ? copy4.sort((a, b) => a.attack - b.attack) : copy4.sort((a, b) => b.attack - a.attack);\n      // console.table(sortedStr);    \n      return {\n        ...state,\n        pokemons: sortedStr\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        pokemons: action.payload\n      };\n    case GET_DETAILS:\n      return {\n        ...state,\n        pokeDetail: action.payload\n      };\n    case CLEAN_DETAIL:\n      return {\n        ...state,\n        pokeDetail: action.payload\n      };\n    case POST_POKEMON:\n      return {\n        ...state\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n  ;\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_ALL_TYPES","FILTER_CREATED","ORDER_NAME","FILTER_TYPE","ORDER_STR","GET_POKEMON_NAME","POST_POKEMON","GET_DETAILS","CLEAN_DETAIL","CLEAN_POKEMONS","initialState","pokemons","allPokemons","types","pokeDetail","rootReducer","state","action","type","payload","copy","createdFiltered","filter","e","createdInBd","copyTwo","typeFiltered","some","name","length","alert","copy3","sortedName","sort","a","b","toLowerCase","localeCompare","copy4","sortedStr","attack"],"sources":["C:/Users/ADMIN/Downloads/PI-Pokemon-main/client/src/reducer/index.js"],"sourcesContent":["import { \r\n    GET_POKEMONS, \r\n    GET_ALL_TYPES, \r\n    FILTER_CREATED, \r\n    ORDER_NAME, \r\n    FILTER_TYPE,\r\n    ORDER_STR,\r\n    GET_POKEMON_NAME,\r\n    POST_POKEMON,\r\n    GET_DETAILS,\r\n    CLEAN_DETAIL,\r\n    CLEAN_POKEMONS\r\n } from \"../actions\";\r\n\r\nconst initialState = {\r\n    pokemons: [],\r\n    allPokemons: [],\r\n    types: [],\r\n    pokeDetail: []\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    \r\n    switch(action.type) {\r\n        case GET_POKEMONS:\r\n            return {\r\n                ...state,\r\n                pokemons: action.payload,\r\n                allPokemons: action.payload\r\n            };\r\n        case CLEAN_POKEMONS:\r\n            return {\r\n                ...state,\r\n                pokemons: action.payload\r\n            }    \r\n        case GET_ALL_TYPES:\r\n            return {\r\n                ...state,\r\n                types: action.payload\r\n            }; \r\n        case FILTER_CREATED:\r\n            let copy = state.allPokemons;\r\n            let createdFiltered;\r\n            if (action.payload === 'created') {\r\n                createdFiltered = copy.filter(e => e.createdInBd);\r\n            } else if (action.payload === 'api') {\r\n                createdFiltered = copy.filter(e => !e.createdInBd);\r\n            } else {\r\n                createdFiltered = copy;\r\n            }\r\n            return {\r\n                ...state,\r\n                pokemons: createdFiltered\r\n            };\r\n        case FILTER_TYPE:\r\n            let copyTwo = state.pokemons;\r\n            let typeFiltered = action.payload === 'all' ? copyTwo : copyTwo.filter(e => e.types.some(e => e.name === action.payload));\r\n            if(typeFiltered.length <= 0){\r\n                typeFiltered = copyTwo;   \r\n                alert('There are no pokemon of the indicated type');\r\n            }; \r\n            return {\r\n                ...state,\r\n                pokemons: typeFiltered\r\n            };\r\n        case ORDER_NAME:\r\n            let copy3 = state.pokemons;\r\n            let sortedName = action.payload === 'asc' ?\r\n                copy3.sort((a, b) => {\r\n                    return a.name.toLowerCase().localeCompare(b.name.toLowerCase())\r\n                }) :\r\n                copy3.sort((a, b) => {\r\n                    return b.name.toLowerCase().localeCompare(a.name.toLowerCase())\r\n                })\r\n            return {\r\n                ...state,\r\n                pokemons: sortedName\r\n            };          \r\n        case ORDER_STR:\r\n            let copy4 = state.pokemons;\r\n            let sortedStr = action.payload === 'asc' ?\r\n                copy4.sort((a, b) => a.attack - b.attack) :\r\n                copy4.sort((a, b) => b.attack - a.attack);\r\n            // console.table(sortedStr);    \r\n            return {\r\n                ...state,\r\n                pokemons: sortedStr\r\n            };\r\n        case GET_POKEMON_NAME:\r\n            return {\r\n                ...state,\r\n                pokemons: action.payload\r\n            };\r\n        case GET_DETAILS:\r\n            return {\r\n                ...state,\r\n                pokeDetail: action.payload\r\n            }\r\n        case CLEAN_DETAIL:\r\n            return {\r\n                ...state,\r\n                pokeDetail: action.payload\r\n            }\r\n        case POST_POKEMON:\r\n            return {\r\n                ...state\r\n            };\r\n        default: \r\n            return {...state};\r\n    };\r\n    \r\n};\r\n\r\nexport default rootReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}