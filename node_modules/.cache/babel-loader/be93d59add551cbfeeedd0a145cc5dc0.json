{"ast":null,"code":"import { pokeAction } from \"../actions\";\nconst inicialState = {\n  pokemons: [],\n  //estado actual\n  pokemonsTypesFilter: [],\n  //estado de los pokemons filtrados\n  pokemonsCopy: [],\n  //copia del estado original siempre va a tener todos los pokemon del api y bd\n  types: [],\n  //guarda el arreglo de los tipos\n  details: [],\n  searchPokemons: [],\n  //para guardar los pokemon buscados con la SearchBar\n  loader: true //para setear un loader\n  // pokemon: {}, //un pokemon\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inicialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //taer a todos los pokemones de la ruta principal\n    case pokeAction.GET_ALL_POKEMONS:\n      return {\n        ...state,\n        loader: false,\n        pokemons: [...state.searchPokemons, ...action.payload],\n        //en mi estado de pokemons, que en un principio es un arreglo vacío, manda todo lo que te envie la acción\n        pokemonsCopy: [...state.searchPokemons, ...action.payload],\n        //una copia que siempre voy a mantener con todos los pokemons que envía el back\n        pokemonsTypesFilter: action.payload // para no perder los estados filtrados al buscar entre pokemons del api y creados, la inicializa con todos los pokemon en un pricipio\n      };\n\n    case pokeAction.GET_POKEMON:\n      //traer a un pokemon por su nombre o id\n      const findPokemon = state.pokemonsCopy.filter(pokemon => pokemon.id === action.payload.id);\n      if (findPokemon.length) {\n        return {\n          ...state,\n          pokemons: [action.payload],\n          loader: false\n        };\n      } else {\n        return {\n          ...state,\n          pokemons: [action.payload],\n          // si hago get a un pokemon que no esté en el estado actual, lo guardo en un arreglo y luego lo paso al principal\n          searchPokemons: [action.payload, ...state.searchPokemons],\n          loader: false\n        };\n      }\n    case pokeAction.POST_POKEMON:\n      //crear a un pokemon y guardarlo en la base de datos\n      return {\n        ...state\n      };\n    case pokeAction.GET_TYPES:\n      //obtener los tipos de pokemones\n      return {\n        ...state,\n        types: action.payload\n      };\n    case pokeAction.FILTER_POKEMONS_BY_TYPE:\n      //Filtrar a los pokemones por tipo\n      const allPokemons = state.pokemonsCopy; //voy a tener pokemonsCopy que siempre va a tener una copia del estado completo, y el estado que se va a esatar enviando filtrado va a ser pokemons, así cada vez que vaya a filtrar nuevamente, voy a tomar como referencia a la copia con el estado original de todos los pokemons\n      const typesFiltered = action.payload === \"all\" ? allPokemons : allPokemons.filter(pokemon => pokemon.types.includes(action.payload));\n      return {\n        ...state,\n        pokemons: typesFiltered,\n        pokemonsTypesFilter: typesFiltered\n      };\n    case pokeAction.FILTER_POKEMONS_CREATED:\n      //filtrar a los pokemones por si estos vienen del api o son creados por el usuario\n      const allPokemons2 = state.pokemonsTypesFilter;\n      let createdFilter = [];\n      if (action.payload === \"created\") {\n        createdFilter = allPokemons2.filter(pokemon => pokemon.createInDb);\n      } else if (action.payload === \"api\") {\n        createdFilter = allPokemons2.filter(pokemon => !pokemon.createInDb);\n      } else {\n        createdFilter = allPokemons2.slice();\n      }\n      return {\n        ...state,\n        pokemons: createdFilter\n      };\n    case pokeAction.SORT_POKEMONS_ALPHABETICALLY:\n      //ordenar a los pokemones de forma alfabética\n      let sortedArr1 = [];\n      if (action.payload === \"asc\") {\n        //ordena de forma ascendente (A - Z)\n        sortedArr1 = state.pokemons.sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        });\n      } else if (action.payload === \"desc\") {\n        //ordena de forma descendente (Z - A)\n        sortedArr1 = state.pokemons.sort((a, b) => {\n          if (a.name > b.name) return -1;\n          if (a.name < b.name) return 1;\n          return 0;\n        });\n      } else {\n        // si se elije ordenar, es decir default, devuelve una copia de pokemonsCopy con el orden original\n        sortedArr1 = state.pokemonsCopy.slice();\n      }\n      return {\n        ...state,\n        pokemons: sortedArr1\n      };\n    case pokeAction.SORT_POKEMONS_BY_STRENGTH:\n      //ordena a los pokemones por fuerza (actualmente en desuso)\n      let sortedArr2 = [];\n      if (action.payload === \"asc\") {\n        sortedArr2 = state.pokemons.sort((a, b) => {\n          if (a.strength > b.strength) return 1;\n          if (a.strength < b.strength) return -1;\n          return 0;\n        });\n      } else if (action.payload === \"desc\") {\n        sortedArr2 = state.pokemons.sort((a, b) => {\n          if (a.strength > b.strength) return -1;\n          if (a.strength < b.strength) return 1;\n          return 0;\n        });\n      } else {\n        sortedArr2 = state.pokemons.slice();\n      }\n      return {\n        ...state,\n        pokemons: sortedArr2\n      };\n    case pokeAction.GET_DETAILS:\n      return {\n        ...state,\n        details: [action.payload]\n      };\n    case pokeAction.CLEAR_DETAILS_STATE:\n      //Limmpiar (vaciar) el estado de detalles\n      return {\n        ...state,\n        details: []\n      };\n    case pokeAction.LOADER_TRUE:\n      //camiar el loader a true\n      return {\n        ...state,\n        loader: true\n      };\n    case pokeAction.LOADER_FALSE:\n      //cambiar el loader a false\n      return {\n        ...state,\n        loader: false\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["pokeAction","inicialState","pokemons","pokemonsTypesFilter","pokemonsCopy","types","details","searchPokemons","loader","rootReducer","state","action","type","GET_ALL_POKEMONS","payload","GET_POKEMON","findPokemon","filter","pokemon","id","length","POST_POKEMON","GET_TYPES","FILTER_POKEMONS_BY_TYPE","allPokemons","typesFiltered","includes","FILTER_POKEMONS_CREATED","allPokemons2","createdFilter","createInDb","slice","SORT_POKEMONS_ALPHABETICALLY","sortedArr1","sort","a","b","name","SORT_POKEMONS_BY_STRENGTH","sortedArr2","strength","GET_DETAILS","CLEAR_DETAILS_STATE","LOADER_TRUE","LOADER_FALSE"],"sources":["C:/Users/ADMIN/Downloads/PI-Pokemon-main/client/src/reducer/index.js"],"sourcesContent":["import { pokeAction } from \"../actions\";\nconst inicialState = {\n  pokemons: [], //estado actual\n  pokemonsTypesFilter: [], //estado de los pokemons filtrados\n  pokemonsCopy: [], //copia del estado original siempre va a tener todos los pokemon del api y bd\n  types: [], //guarda el arreglo de los tipos\n  details: [],\n  searchPokemons: [], //para guardar los pokemon buscados con la SearchBar\n  loader: true, //para setear un loader\n  // pokemon: {}, //un pokemon\n};\n\nfunction rootReducer(state = inicialState, action) {\n  switch (action.type) {\n    //taer a todos los pokemones de la ruta principal\n    case pokeAction.GET_ALL_POKEMONS:\n      return {\n        ...state,\n        loader: false,\n        pokemons: [...state.searchPokemons, ...action.payload], //en mi estado de pokemons, que en un principio es un arreglo vacío, manda todo lo que te envie la acción\n        pokemonsCopy: [...state.searchPokemons, ...action.payload], //una copia que siempre voy a mantener con todos los pokemons que envía el back\n        pokemonsTypesFilter: action.payload, // para no perder los estados filtrados al buscar entre pokemons del api y creados, la inicializa con todos los pokemon en un pricipio\n      };\n    case pokeAction.GET_POKEMON:\n      //traer a un pokemon por su nombre o id\n      const findPokemon = state.pokemonsCopy.filter(\n        (pokemon) => pokemon.id === action.payload.id\n      );\n      if (findPokemon.length) {\n        return {\n          ...state,\n          pokemons: [action.payload],\n          loader: false,\n        };\n      } else {\n        return {\n          ...state,\n          pokemons: [action.payload], // si hago get a un pokemon que no esté en el estado actual, lo guardo en un arreglo y luego lo paso al principal\n          searchPokemons: [action.payload, ...state.searchPokemons],\n          loader: false,\n        };\n      }\n    case pokeAction.POST_POKEMON:\n      //crear a un pokemon y guardarlo en la base de datos\n      return {\n        ...state,\n      };\n    case pokeAction.GET_TYPES:\n      //obtener los tipos de pokemones\n      return {\n        ...state,\n        types: action.payload,\n      };\n    case pokeAction.FILTER_POKEMONS_BY_TYPE:\n      //Filtrar a los pokemones por tipo\n      const allPokemons = state.pokemonsCopy; //voy a tener pokemonsCopy que siempre va a tener una copia del estado completo, y el estado que se va a esatar enviando filtrado va a ser pokemons, así cada vez que vaya a filtrar nuevamente, voy a tomar como referencia a la copia con el estado original de todos los pokemons\n      const typesFiltered =\n        action.payload === \"all\"\n          ? allPokemons\n          : allPokemons.filter((pokemon) =>\n              pokemon.types.includes(action.payload)\n            );\n      return {\n        ...state,\n        pokemons: typesFiltered,\n        pokemonsTypesFilter: typesFiltered,\n      };\n    case pokeAction.FILTER_POKEMONS_CREATED:\n      //filtrar a los pokemones por si estos vienen del api o son creados por el usuario\n      const allPokemons2 = state.pokemonsTypesFilter;\n      let createdFilter = [];\n      if (action.payload === \"created\") {\n        createdFilter = allPokemons2.filter((pokemon) => pokemon.createInDb);\n      } else if (action.payload === \"api\") {\n        createdFilter = allPokemons2.filter((pokemon) => !pokemon.createInDb);\n      } else {\n        createdFilter = allPokemons2.slice();\n      }\n      return {\n        ...state,\n        pokemons: createdFilter,\n      };\n    case pokeAction.SORT_POKEMONS_ALPHABETICALLY:\n      //ordenar a los pokemones de forma alfabética\n      let sortedArr1 = [];\n      if (action.payload === \"asc\") {\n        //ordena de forma ascendente (A - Z)\n        sortedArr1 = state.pokemons.sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        });\n      } else if (action.payload === \"desc\") {\n        //ordena de forma descendente (Z - A)\n        sortedArr1 = state.pokemons.sort((a, b) => {\n          if (a.name > b.name) return -1;\n          if (a.name < b.name) return 1;\n          return 0;\n        });\n      } else {\n        // si se elije ordenar, es decir default, devuelve una copia de pokemonsCopy con el orden original\n        sortedArr1 = state.pokemonsCopy.slice();\n      }\n      return {\n        ...state,\n        pokemons: sortedArr1,\n      };\n    case pokeAction.SORT_POKEMONS_BY_STRENGTH:\n      //ordena a los pokemones por fuerza (actualmente en desuso)\n      let sortedArr2 = [];\n      if (action.payload === \"asc\") {\n        sortedArr2 = state.pokemons.sort((a, b) => {\n          if (a.strength > b.strength) return 1;\n          if (a.strength < b.strength) return -1;\n          return 0;\n        });\n      } else if (action.payload === \"desc\") {\n        sortedArr2 = state.pokemons.sort((a, b) => {\n          if (a.strength > b.strength) return -1;\n          if (a.strength < b.strength) return 1;\n          return 0;\n        });\n      } else {\n        sortedArr2 = state.pokemons.slice();\n      }\n      return {\n        ...state,\n        pokemons: sortedArr2,\n      };\n    case pokeAction.GET_DETAILS:\n      return {\n        ...state,\n        details: [action.payload],\n      };\n    case pokeAction.CLEAR_DETAILS_STATE:\n      //Limmpiar (vaciar) el estado de detalles\n      return {\n        ...state,\n        details: [],\n      };\n    case pokeAction.LOADER_TRUE:\n      //camiar el loader a true\n      return {\n        ...state,\n        loader: true,\n      };\n    case pokeAction.LOADER_FALSE:\n      //cambiar el loader a false\n      return {\n        ...state,\n        loader: false,\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}